[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "context-leakage-team"
description = "Context leakage team: FastAgency based team for testing context leakage."
readme = "README.md"
authors = [
    { name = "airt", email = "info@airt.ai" },
]

requires-python = ">=3.10"

dynamic = ["version"]

dependencies = [
    "fastagency[autogen,mesop,openapi]>=0.3.3",
    "gunicorn>=23.0.0",
    "pydantic>=2.9.0",
]

[project.optional-dependencies]

lint = [
    "mypy==1.11.2",
    "ruff==0.6.7",
    "bandit==1.7.9",
    "semgrep==1.89.0",
    "codespell==2.3.0",
]

testing = [
    "pytest==8.3.3",
    "pytest-asyncio==0.24.0",
]

dev = [
    "context-leakage-team[lint,testing]",
    "pre-commit==3.5.0; python_version < '3.9'",
    "pre-commit==3.8.0; python_version >= '3.9'",
    "detect-secrets==1.5.0",
]

[project.urls]

[tool.hatch.version]
path = "context_leakage_team/__about__.py"

[tool.hatch.build]
skip-excluded-dirs = true
exclude = ["/tests", "/docs"]

[tool.mypy]
files = ["context_leakage_team"]
strict = true
python_version = "3.10"
ignore_missing_imports = true
install_types = true
non_interactive = true
plugins = ["pydantic.mypy"]

# from https://blog.wolt.com/engineering/2021/09/30/professional-grade-mypy-configuration/
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true
warn_unused_ignores = true

disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = false

[tool.ruff]
fix = true
line-length = 88
target-version = "py38"
include = [
    "context_leakage_team/**/*.py",
    "context_leakage_team/**/*.pyi",
    "tests/**/*.py",
    "docs/**/*.py",
    "pyproject.toml",
]
exclude = ["docs/docs_src"]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors     https://docs.astral.sh/ruff/rules/#error-e
    "W",     # pycodestyle warnings   https://docs.astral.sh/ruff/rules/#warning-w
    "C90",   # mccabe                 https://docs.astral.sh/ruff/rules/#mccabe-c90
    "N",     # pep8-naming            https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "D",     # pydocstyle             https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "I",     # isort                  https://docs.astral.sh/ruff/rules/#isort-i
    "F",     # pyflakes               https://docs.astral.sh/ruff/rules/#pyflakes-f
    "ASYNC", # flake8-async           https://docs.astral.sh/ruff/rules/#flake8-async-async
    "C4",    # flake8-comprehensions  https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "B",     # flake8-bugbear         https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "Q",     # flake8-quotes          https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    "T20",   # flake8-print           https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "SIM",   # flake8-simplify        https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "PT",    # flake8-pytest-style    https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "PTH",   # flake8-use-pathlib     https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "TCH",   # flake8-type-checking   https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
    "RUF",   # Ruff-specific rules    https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "PERF",  # Perflint               https://docs.astral.sh/ruff/rules/#perflint-perf
    "UP",    # pyupgrade              https://docs.astral.sh/ruff/rules/#pyupgrade-up
]

ignore = [
    "ASYNC109", # own timeout implementation

    "E501",     # line too long, handled by formatter later
    "C901",     # too complex

    # todo pep8-naming
    "N817",     # CamelCase `*` imported as acronym `*`
    "N815",     # Variable `*` in class scope should not be mixedCase
    "N803",     # Argument name `expandMessageExamples` should be lowercase

    # todo pydocstyle
    "D100",     # missing docstring in public module
    "D101",
    "D102",
    "D103",
    "D104",     # missing docstring in public package
    "D105",     # missing docstring in magic methods
    "D106",     # missing docstring in public nested class
    "D107",     # missing docstring in __init__
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "D101",    # docstrings
    "D102",
    "D103",
    "PLR2004", # magic-value-comparison
    "S101",    # use assert
]

"docs/*.py" = [
    "D101", # docstrings
    "D102",
    "D103",
]

[tool.ruff.lint.isort]
case-sensitive = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = []

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-q -m 'not slow'"
testpaths = ["tests"]
markers = ["slow", "all"]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.run]
parallel = true
branch = true
concurrency = ["multiprocessing", "thread"]
source = ["docs/docs_src", "examples", "context_leakage_team", "tests"]
context = '${CONTEXT}'
omit = ["**/__init__.py", "tests/mypy/*"]

[tool.coverage.report]
show_missing = true
skip_empty = true
exclude_also = [
    "if __name__ == .__main__.:",
    "self.logger",
    "def __repr__",
    "lambda: None",
    "from .*",
    "import .*",
    '@(abc\.)?abstractmethod',
    "raise NotImplementedError",
    'raise AssertionError',
    'logger\..*',
    "pass",
    '\.\.\.',
]
omit = [
    '*/__about__.py',
    '*/__main__.py',
    '*/__init__.py',
]

[tool.bandit]

[tool.codespell]
skip = "./venv*,./docs/site/*,./htmlcov, ./tested_model_config/*"
ignore-words = ".codespell-whitelist.txt"
